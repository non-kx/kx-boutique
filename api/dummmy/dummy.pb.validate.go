// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dummmy/dummy.proto

package dummmy

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDummyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDummyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDummyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDummyRequestMultiError, or nil if none found.
func (m *CreateDummyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDummyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDummyRequestMultiError(errors)
	}

	return nil
}

// CreateDummyRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDummyRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDummyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDummyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDummyRequestMultiError) AllErrors() []error { return m }

// CreateDummyRequestValidationError is the validation error returned by
// CreateDummyRequest.Validate if the designated constraints aren't met.
type CreateDummyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDummyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDummyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDummyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDummyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDummyRequestValidationError) ErrorName() string {
	return "CreateDummyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDummyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDummyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDummyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDummyRequestValidationError{}

// Validate checks the field values on CreateDummyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDummyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDummyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDummyReplyMultiError, or nil if none found.
func (m *CreateDummyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDummyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDummyReplyMultiError(errors)
	}

	return nil
}

// CreateDummyReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDummyReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDummyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDummyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDummyReplyMultiError) AllErrors() []error { return m }

// CreateDummyReplyValidationError is the validation error returned by
// CreateDummyReply.Validate if the designated constraints aren't met.
type CreateDummyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDummyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDummyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDummyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDummyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDummyReplyValidationError) ErrorName() string { return "CreateDummyReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateDummyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDummyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDummyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDummyReplyValidationError{}

// Validate checks the field values on UpdateDummyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDummyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDummyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDummyRequestMultiError, or nil if none found.
func (m *UpdateDummyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDummyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDummyRequestMultiError(errors)
	}

	return nil
}

// UpdateDummyRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDummyRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDummyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDummyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDummyRequestMultiError) AllErrors() []error { return m }

// UpdateDummyRequestValidationError is the validation error returned by
// UpdateDummyRequest.Validate if the designated constraints aren't met.
type UpdateDummyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDummyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDummyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDummyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDummyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDummyRequestValidationError) ErrorName() string {
	return "UpdateDummyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDummyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDummyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDummyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDummyRequestValidationError{}

// Validate checks the field values on UpdateDummyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDummyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDummyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDummyReplyMultiError, or nil if none found.
func (m *UpdateDummyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDummyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDummyReplyMultiError(errors)
	}

	return nil
}

// UpdateDummyReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDummyReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDummyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDummyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDummyReplyMultiError) AllErrors() []error { return m }

// UpdateDummyReplyValidationError is the validation error returned by
// UpdateDummyReply.Validate if the designated constraints aren't met.
type UpdateDummyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDummyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDummyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDummyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDummyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDummyReplyValidationError) ErrorName() string { return "UpdateDummyReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDummyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDummyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDummyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDummyReplyValidationError{}

// Validate checks the field values on DeleteDummyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDummyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDummyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDummyRequestMultiError, or nil if none found.
func (m *DeleteDummyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDummyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDummyRequestMultiError(errors)
	}

	return nil
}

// DeleteDummyRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDummyRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDummyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDummyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDummyRequestMultiError) AllErrors() []error { return m }

// DeleteDummyRequestValidationError is the validation error returned by
// DeleteDummyRequest.Validate if the designated constraints aren't met.
type DeleteDummyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDummyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDummyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDummyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDummyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDummyRequestValidationError) ErrorName() string {
	return "DeleteDummyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDummyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDummyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDummyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDummyRequestValidationError{}

// Validate checks the field values on DeleteDummyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDummyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDummyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDummyReplyMultiError, or nil if none found.
func (m *DeleteDummyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDummyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDummyReplyMultiError(errors)
	}

	return nil
}

// DeleteDummyReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDummyReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDummyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDummyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDummyReplyMultiError) AllErrors() []error { return m }

// DeleteDummyReplyValidationError is the validation error returned by
// DeleteDummyReply.Validate if the designated constraints aren't met.
type DeleteDummyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDummyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDummyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDummyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDummyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDummyReplyValidationError) ErrorName() string { return "DeleteDummyReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDummyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDummyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDummyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDummyReplyValidationError{}

// Validate checks the field values on GetDummyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDummyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDummyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDummyRequestMultiError, or nil if none found.
func (m *GetDummyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDummyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDummyRequestMultiError(errors)
	}

	return nil
}

// GetDummyRequestMultiError is an error wrapping multiple validation errors
// returned by GetDummyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDummyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDummyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDummyRequestMultiError) AllErrors() []error { return m }

// GetDummyRequestValidationError is the validation error returned by
// GetDummyRequest.Validate if the designated constraints aren't met.
type GetDummyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDummyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDummyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDummyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDummyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDummyRequestValidationError) ErrorName() string { return "GetDummyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDummyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDummyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDummyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDummyRequestValidationError{}

// Validate checks the field values on GetDummyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDummyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDummyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDummyReplyMultiError, or
// nil if none found.
func (m *GetDummyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDummyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDummyReplyMultiError(errors)
	}

	return nil
}

// GetDummyReplyMultiError is an error wrapping multiple validation errors
// returned by GetDummyReply.ValidateAll() if the designated constraints
// aren't met.
type GetDummyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDummyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDummyReplyMultiError) AllErrors() []error { return m }

// GetDummyReplyValidationError is the validation error returned by
// GetDummyReply.Validate if the designated constraints aren't met.
type GetDummyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDummyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDummyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDummyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDummyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDummyReplyValidationError) ErrorName() string { return "GetDummyReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDummyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDummyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDummyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDummyReplyValidationError{}

// Validate checks the field values on ListDummyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDummyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDummyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDummyRequestMultiError, or nil if none found.
func (m *ListDummyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDummyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDummyRequestMultiError(errors)
	}

	return nil
}

// ListDummyRequestMultiError is an error wrapping multiple validation errors
// returned by ListDummyRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDummyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDummyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDummyRequestMultiError) AllErrors() []error { return m }

// ListDummyRequestValidationError is the validation error returned by
// ListDummyRequest.Validate if the designated constraints aren't met.
type ListDummyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDummyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDummyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDummyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDummyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDummyRequestValidationError) ErrorName() string { return "ListDummyRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDummyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDummyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDummyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDummyRequestValidationError{}

// Validate checks the field values on ListDummyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDummyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDummyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDummyReplyMultiError,
// or nil if none found.
func (m *ListDummyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDummyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDummyReplyMultiError(errors)
	}

	return nil
}

// ListDummyReplyMultiError is an error wrapping multiple validation errors
// returned by ListDummyReply.ValidateAll() if the designated constraints
// aren't met.
type ListDummyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDummyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDummyReplyMultiError) AllErrors() []error { return m }

// ListDummyReplyValidationError is the validation error returned by
// ListDummyReply.Validate if the designated constraints aren't met.
type ListDummyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDummyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDummyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDummyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDummyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDummyReplyValidationError) ErrorName() string { return "ListDummyReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListDummyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDummyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDummyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDummyReplyValidationError{}
