// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.21.11
// source: api/shop/v1/carts.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCartsAddToCart = "/api.shop.v1.Carts/AddToCart"
const OperationCartsGetCart = "/api.shop.v1.Carts/GetCart"

type CartsHTTPServer interface {
	AddToCart(context.Context, *AddToCartReqeust) (*AddToCartReply, error)
	GetCart(context.Context, *GetCartRequest) (*GetCartReply, error)
}

func RegisterCartsHTTPServer(s *http.Server, srv CartsHTTPServer) {
	r := s.Route("/")
	r.GET("/cart/{user_id}", _Carts_GetCart0_HTTP_Handler(srv))
	r.POST("/cart/{user_id}", _Carts_AddToCart0_HTTP_Handler(srv))
}

func _Carts_GetCart0_HTTP_Handler(srv CartsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCartRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartsGetCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCart(ctx, req.(*GetCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCartReply)
		return ctx.Result(200, reply)
	}
}

func _Carts_AddToCart0_HTTP_Handler(srv CartsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddToCartReqeust
		if err := ctx.Bind(&in.Item); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartsAddToCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddToCart(ctx, req.(*AddToCartReqeust))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddToCartReply)
		return ctx.Result(200, reply)
	}
}

type CartsHTTPClient interface {
	AddToCart(ctx context.Context, req *AddToCartReqeust, opts ...http.CallOption) (rsp *AddToCartReply, err error)
	GetCart(ctx context.Context, req *GetCartRequest, opts ...http.CallOption) (rsp *GetCartReply, err error)
}

type CartsHTTPClientImpl struct {
	cc *http.Client
}

func NewCartsHTTPClient(client *http.Client) CartsHTTPClient {
	return &CartsHTTPClientImpl{client}
}

func (c *CartsHTTPClientImpl) AddToCart(ctx context.Context, in *AddToCartReqeust, opts ...http.CallOption) (*AddToCartReply, error) {
	var out AddToCartReply
	pattern := "/cart/{user_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartsAddToCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Item, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CartsHTTPClientImpl) GetCart(ctx context.Context, in *GetCartRequest, opts ...http.CallOption) (*GetCartReply, error) {
	var out GetCartReply
	pattern := "/cart/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCartsGetCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
