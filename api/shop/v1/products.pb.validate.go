// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shop/v1/products.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if m.ImageUrl != nil {
		// no validation rules for ImageUrl
	}

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on GetProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductRequestMultiError, or nil if none found.
func (m *GetProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetProductRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductRequestMultiError(errors)
	}

	return nil
}

// GetProductRequestMultiError is an error wrapping multiple validation errors
// returned by GetProductRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductRequestMultiError) AllErrors() []error { return m }

// GetProductRequestValidationError is the validation error returned by
// GetProductRequest.Validate if the designated constraints aren't met.
type GetProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductRequestValidationError) ErrorName() string {
	return "GetProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductRequestValidationError{}

// Validate checks the field values on GetProductReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProductReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductReplyMultiError, or nil if none found.
func (m *GetProductReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if m.ImageUrl != nil {
		// no validation rules for ImageUrl
	}

	if len(errors) > 0 {
		return GetProductReplyMultiError(errors)
	}

	return nil
}

// GetProductReplyMultiError is an error wrapping multiple validation errors
// returned by GetProductReply.ValidateAll() if the designated constraints
// aren't met.
type GetProductReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductReplyMultiError) AllErrors() []error { return m }

// GetProductReplyValidationError is the validation error returned by
// GetProductReply.Validate if the designated constraints aren't met.
type GetProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductReplyValidationError) ErrorName() string { return "GetProductReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductReplyValidationError{}

// Validate checks the field values on GetProductsPaginateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductsPaginateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductsPaginateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductsPaginateRequestMultiError, or nil if none found.
func (m *GetProductsPaginateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductsPaginateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetProductsPaginateRequestMultiError(errors)
	}

	return nil
}

// GetProductsPaginateRequestMultiError is an error wrapping multiple
// validation errors returned by GetProductsPaginateRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProductsPaginateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductsPaginateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductsPaginateRequestMultiError) AllErrors() []error { return m }

// GetProductsPaginateRequestValidationError is the validation error returned
// by GetProductsPaginateRequest.Validate if the designated constraints aren't met.
type GetProductsPaginateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductsPaginateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductsPaginateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductsPaginateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductsPaginateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductsPaginateRequestValidationError) ErrorName() string {
	return "GetProductsPaginateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductsPaginateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductsPaginateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductsPaginateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductsPaginateRequestValidationError{}

// Validate checks the field values on GetProductsPaginateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductsPaginateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductsPaginateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductsPaginateReplyMultiError, or nil if none found.
func (m *GetProductsPaginateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductsPaginateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProductsPaginateReplyValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProductsPaginateReplyValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProductsPaginateReplyValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageCount

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return GetProductsPaginateReplyMultiError(errors)
	}

	return nil
}

// GetProductsPaginateReplyMultiError is an error wrapping multiple validation
// errors returned by GetProductsPaginateReply.ValidateAll() if the designated
// constraints aren't met.
type GetProductsPaginateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductsPaginateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductsPaginateReplyMultiError) AllErrors() []error { return m }

// GetProductsPaginateReplyValidationError is the validation error returned by
// GetProductsPaginateReply.Validate if the designated constraints aren't met.
type GetProductsPaginateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductsPaginateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductsPaginateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductsPaginateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductsPaginateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductsPaginateReplyValidationError) ErrorName() string {
	return "GetProductsPaginateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductsPaginateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductsPaginateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductsPaginateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductsPaginateReplyValidationError{}
