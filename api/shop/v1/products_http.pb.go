// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.21.11
// source: shop/v1/products.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProductsGetProduct = "/api.shop.v1.Products/GetProduct"
const OperationProductsGetProductsPaginate = "/api.shop.v1.Products/GetProductsPaginate"

type ProductsHTTPServer interface {
	GetProduct(context.Context, *GetProductRequest) (*GetProductReply, error)
	GetProductsPaginate(context.Context, *GetProductsPaginateRequest) (*GetProductsPaginateReply, error)
}

func RegisterProductsHTTPServer(s *http.Server, srv ProductsHTTPServer) {
	r := s.Route("/")
	r.GET("/product/{id}", _Products_GetProduct0_HTTP_Handler(srv))
	r.GET("/product", _Products_GetProductsPaginate0_HTTP_Handler(srv))
}

func _Products_GetProduct0_HTTP_Handler(srv ProductsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProductRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductsGetProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProduct(ctx, req.(*GetProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProductReply)
		return ctx.Result(200, reply)
	}
}

func _Products_GetProductsPaginate0_HTTP_Handler(srv ProductsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProductsPaginateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductsGetProductsPaginate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProductsPaginate(ctx, req.(*GetProductsPaginateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProductsPaginateReply)
		return ctx.Result(200, reply)
	}
}

type ProductsHTTPClient interface {
	GetProduct(ctx context.Context, req *GetProductRequest, opts ...http.CallOption) (rsp *GetProductReply, err error)
	GetProductsPaginate(ctx context.Context, req *GetProductsPaginateRequest, opts ...http.CallOption) (rsp *GetProductsPaginateReply, err error)
}

type ProductsHTTPClientImpl struct {
	cc *http.Client
}

func NewProductsHTTPClient(client *http.Client) ProductsHTTPClient {
	return &ProductsHTTPClientImpl{client}
}

func (c *ProductsHTTPClientImpl) GetProduct(ctx context.Context, in *GetProductRequest, opts ...http.CallOption) (*GetProductReply, error) {
	var out GetProductReply
	pattern := "/product/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductsGetProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductsHTTPClientImpl) GetProductsPaginate(ctx context.Context, in *GetProductsPaginateRequest, opts ...http.CallOption) (*GetProductsPaginateReply, error) {
	var out GetProductsPaginateReply
	pattern := "/product"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductsGetProductsPaginate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
