// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/auth.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAuthRequestMultiError, or nil if none found.
func (m *CreateAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAuthRequestMultiError(errors)
	}

	return nil
}

// CreateAuthRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAuthRequestMultiError) AllErrors() []error { return m }

// CreateAuthRequestValidationError is the validation error returned by
// CreateAuthRequest.Validate if the designated constraints aren't met.
type CreateAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAuthRequestValidationError) ErrorName() string {
	return "CreateAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAuthRequestValidationError{}

// Validate checks the field values on CreateAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAuthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAuthReplyMultiError, or nil if none found.
func (m *CreateAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAuthReplyMultiError(errors)
	}

	return nil
}

// CreateAuthReplyMultiError is an error wrapping multiple validation errors
// returned by CreateAuthReply.ValidateAll() if the designated constraints
// aren't met.
type CreateAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAuthReplyMultiError) AllErrors() []error { return m }

// CreateAuthReplyValidationError is the validation error returned by
// CreateAuthReply.Validate if the designated constraints aren't met.
type CreateAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAuthReplyValidationError) ErrorName() string { return "CreateAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAuthReplyValidationError{}

// Validate checks the field values on UpdateAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAuthRequestMultiError, or nil if none found.
func (m *UpdateAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAuthRequestMultiError(errors)
	}

	return nil
}

// UpdateAuthRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuthRequestMultiError) AllErrors() []error { return m }

// UpdateAuthRequestValidationError is the validation error returned by
// UpdateAuthRequest.Validate if the designated constraints aren't met.
type UpdateAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuthRequestValidationError) ErrorName() string {
	return "UpdateAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuthRequestValidationError{}

// Validate checks the field values on UpdateAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAuthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAuthReplyMultiError, or nil if none found.
func (m *UpdateAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAuthReplyMultiError(errors)
	}

	return nil
}

// UpdateAuthReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateAuthReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuthReplyMultiError) AllErrors() []error { return m }

// UpdateAuthReplyValidationError is the validation error returned by
// UpdateAuthReply.Validate if the designated constraints aren't met.
type UpdateAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuthReplyValidationError) ErrorName() string { return "UpdateAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuthReplyValidationError{}

// Validate checks the field values on DeleteAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAuthRequestMultiError, or nil if none found.
func (m *DeleteAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAuthRequestMultiError(errors)
	}

	return nil
}

// DeleteAuthRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuthRequestMultiError) AllErrors() []error { return m }

// DeleteAuthRequestValidationError is the validation error returned by
// DeleteAuthRequest.Validate if the designated constraints aren't met.
type DeleteAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuthRequestValidationError) ErrorName() string {
	return "DeleteAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuthRequestValidationError{}

// Validate checks the field values on DeleteAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAuthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAuthReplyMultiError, or nil if none found.
func (m *DeleteAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAuthReplyMultiError(errors)
	}

	return nil
}

// DeleteAuthReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteAuthReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuthReplyMultiError) AllErrors() []error { return m }

// DeleteAuthReplyValidationError is the validation error returned by
// DeleteAuthReply.Validate if the designated constraints aren't met.
type DeleteAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuthReplyValidationError) ErrorName() string { return "DeleteAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuthReplyValidationError{}

// Validate checks the field values on GetAuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAuthRequestMultiError,
// or nil if none found.
func (m *GetAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetAuthRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAuthRequestMultiError(errors)
	}

	return nil
}

// GetAuthRequestMultiError is an error wrapping multiple validation errors
// returned by GetAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthRequestMultiError) AllErrors() []error { return m }

// GetAuthRequestValidationError is the validation error returned by
// GetAuthRequest.Validate if the designated constraints aren't met.
type GetAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthRequestValidationError) ErrorName() string { return "GetAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthRequestValidationError{}

// Validate checks the field values on GetAuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAuthReplyMultiError, or
// nil if none found.
func (m *GetAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAuthReplyMultiError(errors)
	}

	return nil
}

// GetAuthReplyMultiError is an error wrapping multiple validation errors
// returned by GetAuthReply.ValidateAll() if the designated constraints aren't met.
type GetAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthReplyMultiError) AllErrors() []error { return m }

// GetAuthReplyValidationError is the validation error returned by
// GetAuthReply.Validate if the designated constraints aren't met.
type GetAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthReplyValidationError) ErrorName() string { return "GetAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthReplyValidationError{}

// Validate checks the field values on ListAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthRequestMultiError, or nil if none found.
func (m *ListAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAuthRequestMultiError(errors)
	}

	return nil
}

// ListAuthRequestMultiError is an error wrapping multiple validation errors
// returned by ListAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthRequestMultiError) AllErrors() []error { return m }

// ListAuthRequestValidationError is the validation error returned by
// ListAuthRequest.Validate if the designated constraints aren't met.
type ListAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthRequestValidationError) ErrorName() string { return "ListAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthRequestValidationError{}

// Validate checks the field values on ListAuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAuthReplyMultiError, or
// nil if none found.
func (m *ListAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAuthReplyMultiError(errors)
	}

	return nil
}

// ListAuthReplyMultiError is an error wrapping multiple validation errors
// returned by ListAuthReply.ValidateAll() if the designated constraints
// aren't met.
type ListAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthReplyMultiError) AllErrors() []error { return m }

// ListAuthReplyValidationError is the validation error returned by
// ListAuthReply.Validate if the designated constraints aren't met.
type ListAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthReplyValidationError) ErrorName() string { return "ListAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthReplyValidationError{}
